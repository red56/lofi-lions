version: 2.1

jobs:
  build:
    parallelism: 1
    docker:
    - image: cimg/ruby:2.6.10-browsers
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_TOKEN
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        DB_USER: circleci-db-user
        RAILS_ENV: test
        TZ: "Europe/London"
    - image: cimg/postgres:14.5
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_TOKEN
      environment:
        POSTGRES_USER: circleci-db-user
        POSTGRES_DB: lofi_lions_test
        POSTGRES_PASSWORD: ""
        POSTGRES_HOST_AUTH_METHOD: trust
    steps:
    - checkout

    - run:
        name: install bundler (and report)
        command: |
          gem install bundler
          bundle -v

      # Restore bundle cache
    - restore_cache:
        keys:
        - lofilions-bundle-v2-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - lofilions-bundle-v2-{{ .Branch }}-
        - lofilions-bundle-v2-master-
        - lofilions-bundle-v2-
        - lofilions-bundle-v1-
    - run:
        name: Bundle Install
        command: bundle check || bundle install

      # Store bundle cache
    - save_cache:
        key: lofilions-bundle-v2-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
#    - restore_cache:
#        keys:
#        - lofilions-yarn-{{ checksum "yarn.lock" }}
#        - lofilions-yarn-

#    - run:
#        name: Yarn Install
#        command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
#    - save_cache:
#        key: lofilions-yarn-{{ checksum "yarn.lock" }}
#        paths:
#        - ~/.cache/yarn

    - run:
        name: Wait for DB
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    - run:
        name: Database setup
        command: |
          bundle exec rake db:create --trace
          bundle exec rake db:schema:load --trace

    - run:
        name: Run rspec in parallel
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format d \
                            spec
#                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

    - run:
        name: Bundle audit
        command: |
          bundle exec bundle-audit update
          bin/bundle-audit-local --verbose

      # Save test results for timing analysis
    - store_test_results:
        path: test_results

    - store_artifacts:
        path: tmp/capybara
        destination: screenshots

    - restore_cache:
        keys:
          - lofi-2022-10-17-rubocop-{{ .Branch }}
          - lofi-2022-10-17-rubocop-main
          - lofi-2022-10-17-rubocop-
    - run:
        name: Rubocop
        command: bundle exec rubocop --format quiet
    - save_cache:
        key: lofi-2022-10-17-rubocop-{{ .Branch }}
        paths:
          - tmp/rubocop_cache

workflows:
  commit:
    jobs:
      - build:
          context: docker-auth
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * 1" # every monday at 2am
          filters:
            branches:
              only:
                - main
    jobs:
      - build:
          context: docker-auth

